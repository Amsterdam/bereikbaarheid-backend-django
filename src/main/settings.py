"""
Django settings for bereikbaarheid project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import json
import os
import sys
from pathlib import Path

from azure.identity import WorkloadIdentityCredential
from django.http.request import urljoin
from opencensus.trace import config_integration

from .azure_settings import Azure

azure = Azure()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.getenv("DEBUG", False))

ALLOWED_HOSTS = ["*"]
X_FRAME_OPTIONS = "ALLOW-FROM *"
INTERNAL_IPS = ("127.0.0.1", "0.0.0.0")

_setting = DEBUG
# flip in development = True, production = False
_setting ^= _setting
CSRF_COOKIE_SECURE = _setting
SESSION_COOKIE_SECURE = _setting
SECURE_SSL_REDIRECT = _setting


def make_url_path(url_path):
    """
    url paths should have trailing slash, unless its for the root
    """
    return (url_path.strip().strip("/") + "/").lstrip("/")


API_PATH = make_url_path(os.getenv("API_PATH", ""))

ADMIN_ENABLED = os.getenv("ADMIN_ENABLED", "false").lower() == "true"
ADMIN_PATH = make_url_path(os.getenv("ADMIN_PATH", "admin"))


# Application definition
DJANGO_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
]
THIRD_PARTY_APPS = ["corsheaders", "import_export", "leaflet", "rest_framework", "rest_framework_gis", "storages"]
LOCAL_APPS = ["main", "bereikbaarheid", "touringcar"]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "main.auth.OIDCAuthenticationBackend",
]

# Only enabled the plugin if admin is enabled
if ADMIN_ENABLED:
    INSTALLED_APPS += ("django.contrib.admin",)
    THIRD_PARTY_APPS += ("mozilla_django_oidc",)
    MIDDLEWARE += ("mozilla_django_oidc.middleware.SessionRefresh",)

BASE_URL = os.getenv("BASE_URL", "")

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = [ 'GET', ]

## OpenId Connect settings ##
LOGIN_URL = "oidc_authentication_init"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
LOGIN_REDIRECT_URL_FAILURE = urljoin(f"{BASE_URL}/", "403/")

OIDC_BASE_URL = os.getenv("OIDC_BASE_URL")
OIDC_RP_CLIENT_ID = os.getenv("OIDC_RP_CLIENT_ID")
OIDC_RP_CLIENT_SECRET = os.getenv("OIDC_RP_CLIENT_SECRET")
OIDC_OP_AUTHORIZATION_ENDPOINT = f"{OIDC_BASE_URL}/oauth2/v2.0/authorize"
OIDC_OP_TOKEN_ENDPOINT = f"{OIDC_BASE_URL}/oauth2/v2.0/token"
OIDC_OP_USER_ENDPOINT = "https://graph.microsoft.com/oidc/userinfo"
OIDC_OP_JWKS_ENDPOINT = f"{OIDC_BASE_URL}/discovery/v2.0/keys"
OIDC_OP_LOGOUT_ENDPOINT = f"{OIDC_BASE_URL}/oauth2/v2.0/logout"
OIDC_RP_SIGN_ALGO = "RS256"
OIDC_AUTH_REQUEST_EXTRA_PARAMS = {"prompt": "select_account"}

ROOT_URLCONF = "main.urls"
FORCE_SCRIPT_NAME = BASE_URL

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = urljoin(f"{BASE_URL}/", "static/")
STATIC_ROOT = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media").replace("\\", "/")
MEDIA_URL = "/media/"

# Django-storages for Django > 4.2
STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }

# Azure Storageaccount settings
if os.getenv("AZURE_FEDERATED_TOKEN_FILE"):
    credential = WorkloadIdentityCredential()
    STORAGE_AZURE = {
        "default": {
            "BACKEND": "storages.backends.azure_storage.AzureStorage",
            "OPTIONS": {
                "token_credential": credential,
                "account_name": os.getenv("AZURE_STORAGE_ACCOUNT_NAME"),
                "azure_container": "public-storage",
            },
        },
    }
    STORAGES |= STORAGE_AZURE #update storages with storage_azure

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "main.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASE_HOST = os.getenv("DATABASE_HOST", "database")
DATABASE_NAME = os.getenv("DATABASE_NAME", "bereikbaarheid")
DATABASE_USER = os.getenv("DATABASE_USER", "bereikbaarheid")
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD", "insecure")
DATABASE_PORT = os.getenv("DATABASE_PORT", "5432")
DATABASE_OPTIONS = {"sslmode": "allow", "connect_timeout": 5}

if "azure.com" in DATABASE_HOST:
    DATABASE_PASSWORD = azure.auth.db_password
    DATABASE_OPTIONS["sslmode"] = "require"

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": DATABASE_NAME,
        "USER": DATABASE_USER,
        "PASSWORD": DATABASE_PASSWORD,
        "HOST": DATABASE_HOST,
        "CONN_MAX_AGE": 60 * 5,
        "PORT": DATABASE_PORT,
        "OPTIONS": DATABASE_OPTIONS,
    },
}

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Amsterdam"

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "django_cache",
    }
}

# TODO: leaflet lijkt alleen te werken met CRS WebMercator. Misschien is mogelijk SRID/CRS om te zetten naar RD 28992?
LEAFLET_CONFIG = {
    "TILES": [
        (
            "Amsterdam",
            "https://t1.data.amsterdam.nl/topo_wm_light/{z}/{x}/{y}.png",
            {
                "attribution": 'Kaartgegevens &copy; <a href="https://data.amsterdam.nl/">Gemeente Amsterdam </a>'
            },
        ),
    ],
    "DEFAULT_CENTER": (4.9020727, 52.3717204),
    "DEFAULT_ZOOM": 12,
    "MIN_ZOOM": 11,
    "MAX_ZOOM": 21,
    "SPATIAL_EXTENT": (3.2, 50.75, 7.22, 53.7),
    "RESET_VIEW": False,
}

# Django Logging settings
base_log_fmt = {"time": "%(asctime)s", "name": "%(name)s", "level": "%(levelname)s"}
log_fmt = base_log_fmt.copy()
log_fmt["message"] = "%(message)s"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {
        "level": "INFO",
        "handlers": ["console"],
    },
    "formatters": {
        "json": {"format": json.dumps(log_fmt)},
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
    },
    "loggers": {
        "bereikbaarheid": {
            "level": "WARNING",
            "handlers": ["console"],
            "propagate": False,
        },
        "touringcar": {
            "level": "WARNING",
            "handlers": ["console"],
            "propagate": False,
        },        
        "main": {
            "level": "WARNING",
            "handlers": ["console"],
            "propagate": False,
        },
        "django": {
            "handlers": ["console"],
            "level": os.getenv(
                "DJANGO_LOG_LEVEL", "ERROR" if "pytest" in sys.argv[0] else "INFO"
            ).upper(),
            "propagate": False,
        },
        # Log all unhandled exceptions
        "django.request": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}


if APPLICATIONINSIGHTS_CONNECTION_STRING:= os.getenv("APPLICATIONINSIGHTS_CONNECTION_STRING"):
    MIDDLEWARE.append("opencensus.ext.django.middleware.OpencensusMiddleware")

    service_prefix = 'api'
    if ADMIN_ENABLED:
        service_prefix = 'admin'

    OPENCENSUS = {
        "TRACE": {
            "SAMPLER": "opencensus.trace.samplers.ProbabilitySampler(rate=1)",
            "EXPORTER": f'''opencensus.ext.azure.trace_exporter.AzureExporter(
                connection_string='{APPLICATIONINSIGHTS_CONNECTION_STRING}',
                service_name='{service_prefix}-bereikbaarheid-backend' )''',
        }
    }
    config_integration.trace_integrations(["logging"])
    LOGGING["handlers"]["azure"] = {
        "level": "DEBUG",
        "class": "opencensus.ext.azure.log_exporter.AzureLogHandler",
        "connection_string": APPLICATIONINSIGHTS_CONNECTION_STRING,
        "formatter": "json"
    }
    LOGGING["root"]["handlers"].append("azure")
    for logger_name, logger_details in LOGGING["loggers"].items():
        LOGGING["loggers"][logger_name]["handlers"].append("azure")

